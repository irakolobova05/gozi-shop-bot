import sqlite3
from bot_instance import bot
from database.db import get_db
from models import Category, Shop, Product

def update_cart_quantity(us_id: int, product_id: int, size: str, quantity: int):
    try:
        with get_db() as conn:
            cur = conn.cursor()
            if size:
                cur.execute(
                    'UPDATE cart SET quantity = ? WHERE user_id = ? AND product_id = ? AND size = ?',
                    (quantity, us_id, product_id, size)
                )
            else:
                cur.execute(
                    'UPDATE cart SET quantity = ? WHERE user_id = ? AND product_id = ? AND size IS NULL',
                    (quantity, us_id, product_id)
                )
            conn.commit()
    except sqlite3.Error as e:
        print(f"[update_cart_quantity] –û—à–∏–±–∫–∞: {e}")

def insert_highlight(user_id: int, product_id: int):
    try:
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute(
                'INSERT OR IGNORE INTO likes (user_id, product_id) VALUES (?, ?)',
                (user_id, product_id)
            )
            conn.commit()
    except sqlite3.Error as e:
        print(f"[insert_highlight] –û—à–∏–±–∫–∞: {e}")

def delete_highlight(user_id: int, product_id: int):
    try:
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute(
                'DELETE FROM likes WHERE user_id = ? AND product_id = ?',
                (user_id, product_id)
            )
            conn.commit()
    except sqlite3.Error as e:
        print(f"[delete_highlight] –û—à–∏–±–∫–∞: {e}")

def delete_cart(user_id: int, product_id: int, size: str = None):
    try:
        with get_db() as conn:
            cur = conn.cursor()
            if size is not None:
                cur.execute(
                    'DELETE FROM cart WHERE user_id = ? AND product_id = ? AND size = ?',
                    (user_id, product_id, size)
                )
            else:
                cur.execute(
                    'DELETE FROM cart WHERE user_id = ? AND product_id = ? AND size IS NULL',
                    (user_id, product_id)
                )
            conn.commit()
    except sqlite3.Error as e:
        print(f"[delete_cart] –û—à–∏–±–∫–∞: {e}")

def insert_users(us_id: int, username: str):
    try:
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute(
                'INSERT OR IGNORE INTO users (id, username) VALUES (?, ?)',
                (us_id, username)
            )
            conn.commit()
    except sqlite3.Error as e:
        print(f"[insert_users] –û—à–∏–±–∫–∞: {e}")

def insert_cart(us_id: int, product_id: int):
    try:
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute(
                'SELECT quantity FROM cart WHERE user_id = ? AND product_id = ? AND size IS NULL',
                (us_id, product_id)
            )
            existing = cur.fetchone()
            if existing:
                new_quantity = existing[0] + 1
                cur.execute(
                    'UPDATE cart SET quantity = ? WHERE user_id = ? AND product_id = ? AND size IS NULL',
                    (new_quantity, us_id, product_id)
                )
            else:
                cur.execute(
                    'INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, 1)',
                    (us_id, product_id)
                )
            conn.commit()
    except sqlite3.Error as e:
        print(f"[insert_cart] –û—à–∏–±–∫–∞: {e}")

def insert_cart_with_size(us_id: int, product_id: int, size: str):
    try:
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute(
                'SELECT quantity FROM cart WHERE user_id = ? AND product_id = ? AND size = ?',
                (us_id, product_id, size)
            )
            existing = cur.fetchone()
            if existing:
                new_quantity = existing[0] + 1
                cur.execute(
                    'UPDATE cart SET quantity = ? WHERE user_id = ? AND product_id = ? AND size = ?',
                    (new_quantity, us_id, product_id, size)
                )
            else:
                cur.execute(
                    'INSERT INTO cart (user_id, product_id, size, quantity) VALUES (?, ?, ?, 1)',
                    (us_id, product_id, size)
                )
            conn.commit()
    except sqlite3.Error as e:
        print(f"[insert_cart_with_size] –û—à–∏–±–∫–∞: {e}")

def check_username_exists(username):
    try:
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute(
                'SELECT 1 FROM users WHERE username = ?',
                (username,)
            )
            return cur.fetchone() is not None
    except sqlite3.Error as e:
        print(f"[check_username_exists] –û—à–∏–±–∫–∞: {e}")
        return False

def check_record_exists(user_id: int, product_id: int) -> bool:
    try:
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute(
                'SELECT EXISTS(SELECT 1 FROM likes WHERE user_id = ? AND product_id = ?)',
                (user_id, product_id)
            )
            return cur.fetchone()[0] == 1
    except sqlite3.Error as e:
        print(f"[check_record_exists] –û—à–∏–±–∫–∞: {e}")
        return False

def likes_database(user_id: int):
    try:
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute("SELECT product_id FROM likes WHERE user_id = ?", (user_id,))
            return [row[0] for row in cur.fetchall()]
    except sqlite3.Error as e:
        print(f"[likes_database] –û—à–∏–±–∫–∞: {e}")
        return []

def cart_database(user_id: int):
    try:
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute("SELECT product_id, size, quantity FROM cart WHERE user_id = ?", (user_id,))
            return cur.fetchall()
    except sqlite3.Error as e:
        print(f"[cart_database] –û—à–∏–±–∫–∞: {e}")
        return []

def get_categories():
    try:
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute("SELECT * FROM categories")
            return [Category(id=row[0], name=row[1]) for row in cur.fetchall()]
    except sqlite3.Error as e:
        print(f"[get_categories] –û—à–∏–±–∫–∞: {e}")
        return []

def get_shops():
    try:
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute("SELECT * FROM shops")
            return [
                Shop(
                    id=row[0],
                    name=row[1],
                    description=row[2].replace("\\n", "\n"),
                    images=row[3].split(' ') if row[3] else [],
                    status=row[4] == "True"
                ) for row in cur.fetchall()
            ]
    except sqlite3.Error as e:
        print(f"[get_shops] –û—à–∏–±–∫–∞: {e}")
        return []

def get_products():
    try:
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute("SELECT * FROM products")
            products_data = cur.fetchall()
            products = []
            for product in products_data:
                d = product[4].replace("\\n", "\n")
                descr = '*' + product[1] + '*\n\n' + '*–¶–µ–Ω–∞:* ' + str(product[5]) + ' ‚ÇΩ\n\n' + d
                if product[7] == "True":
                    st = True
                else:
                    st = False
                p = Product(
                    id=product[0],
                    name=product[1],
                    category=product[3],
                    description=descr,
                    price=product[5],
                    images=product[6].split(' ') if product[6] else [],
                    status=st,
                    shop_id=product[2],
                    sizes=product[8].split(' ') if product[8] else []
                )
                products.append(p)
            return products
    except sqlite3.Error as e:
        print(f"[get_products] –û—à–∏–±–∫–∞: {e}")
        return []

def personal_data(user_id):
    try:
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute("""
                    SELECT username, phone_number, [index], fio, city, street, house_number, flat_number, region 
                    FROM users WHERE id = ?
                """, (user_id,))
            return cur.fetchone()
    except sqlite3.Error as e:
        print(f"[personal_data] –û—à–∏–±–∫–∞: {e}")
        return None

def update_order_status(order_id, new_status=0):
    try:
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute(
                'UPDATE orders SET status = ? WHERE id = ?',
                (new_status, order_id)
            )
            conn.commit()
            return f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"
    except Exception as e:
        print(f"Error updating order status: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"

def get_all_orders(message):
    try:
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute("""
                SELECT o.id, o.user_id, o.shop_id, o.product_id, o.date, 
                       o.quantity, o.size, o.price, o.status,
                       u.username, s.name as shop_name, p.name as product_name
                FROM orders o
                LEFT JOIN users u ON o.user_id = u.id
                LEFT JOIN shops s ON o.shop_id = s.id
                LEFT JOIN products p ON o.product_id = p.id
            """)
            orders_data = cur.fetchall()
            orders = []
            for order in orders_data:
                if order[8] == 1:
                    order_str = (
                        f"üÜî ID –∑–∞–∫–∞–∑–∞: {order[0]}\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order[9]} (ID: {order[1]})\n"
                        f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {order[10]} (ID: {order[2]})\n"
                        f"üõçÔ∏è –¢–æ–≤–∞—Ä: {order[11]} (ID: {order[3]})\n"
                        f"üìÖ –î–∞—Ç–∞: {order[4]}\n"
                        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order[5]}\n"
                        f"üìè –†–∞–∑–º–µ—Ä: {order[6]}\n"
                        f"üí∞ –¶–µ–Ω–∞: {order[7]} —Ä—É–±.\n"
                        f"üîÑ –°—Ç–∞—Ç—É—Å: {order[8]}\n"
                        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                    )
                    orders.append(order_str)
            return orders
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        return []

def get_user_info(message):
    try:
        with get_db() as conn:
            cur = conn.cursor()
            user_id = message.text
            if not user_id.isdigit():
                bot.send_message(message.chat.id, "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return
            cur.execute("""
                SELECT id, username, phone_number, [index], fio, 
                       city, street, house_number, flat_number, region
                FROM users WHERE id = ?
            """, (user_id,))
            user = cur.fetchone()
            if not user:
                bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            user_id = user[0]
            username = user[1] or "–ù–µ —É–∫–∞–∑–∞–Ω"
            phone = user[2] or "–ù–µ —É–∫–∞–∑–∞–Ω"
            fio = user[4] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            region = user[9] or "–ù–µ —É–∫–∞–∑–∞–Ω"
            city = user[5] or "–ù–µ —É–∫–∞–∑–∞–Ω"
            street = user[6] or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            house = user[7] or "–ù–µ —É–∫–∞–∑–∞–Ω"
            flat = user[8] or ""
            index_code = user[3] or ""

            address_parts = [
                f"–†–µ–≥–∏–æ–Ω: {region}",
                f"–ì–æ—Ä–æ–¥: {city}",
                f"–£–ª–∏—Ü–∞: {street}",
                f"–î–æ–º: {house}" + (f", –ö–≤–∞—Ä—Ç–∏—Ä–∞: {flat}" if flat else ""),
                f"–ò–Ω–¥–µ–∫—Å: {index_code}" if index_code else ""
            ]
            address = "\n".join(filter(None, address_parts))

            user_str = (
                f"üÜî ID: {user_id}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                f"üë§ –§–ò–û: {fio}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üè† –ê–¥—Ä–µ—Å: \n{address}\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            )

            bot.send_message(message.chat.id, user_str)

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {str(e)}"
        print(error_msg)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

def delete_user_info(message):
    try:
        with get_db() as conn:
            cur = conn.cursor()
            user_id = message.text

            if not user_id.isdigit():
                bot.send_message(message.chat.id, "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return
            cur.execute("SELECT id FROM users WHERE id = ?", (user_id,))
            if not cur.fetchone():
                bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cur.execute("DELETE FROM users WHERE id = ?", (user_id,))
            conn.commit()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏–ª–∞—Å—å
            cur.execute("SELECT id FROM users WHERE id = ?", (user_id,))
            if not cur.fetchone():
                bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"
        print(error_msg)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

def get_all_users(message):
    try:
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute("""
                SELECT id, username, phone_number, [index], fio, 
                       city, street, house_number, flat_number, region
                FROM users
            """)
            users_data = cur.fetchall()
            users = []
            for user in users_data:
                user_id = user[0]
                username = user[1] or "–ù–µ —É–∫–∞–∑–∞–Ω"
                phone = user[2] or "–ù–µ —É–∫–∞–∑–∞–Ω"
                fio = user[4] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                region = user[9] or "–ù–µ —É–∫–∞–∑–∞–Ω"
                city = user[5] or "–ù–µ —É–∫–∞–∑–∞–Ω"
                street = user[6] or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                house = user[7] or "–ù–µ —É–∫–∞–∑–∞–Ω"
                flat = user[8] or ""
                index_code = user[3] or ""

                address_parts = [
                    f"–†–µ–≥–∏–æ–Ω: {region}",
                    f"–ì–æ—Ä–æ–¥: {city}",
                    f"–£–ª–∏—Ü–∞: {street}",
                    f"–î–æ–º: {house}" + (f", –ö–≤–∞—Ä—Ç–∏—Ä–∞: {flat}" if flat else ""),
                    f"–ò–Ω–¥–µ–∫—Å: {index_code}" if index_code else ""
                ]
                address = ", ".join(filter(None, address_parts))
                user_str = (
                    f"üÜî ID: {user_id}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                    f"üë§ –§–ò–û: {fio}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                    f"üè† –ê–¥—Ä–µ—Å: {address}\n"
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                )
                users.append(user_str)
            return users
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —é–∑–µ—Ä–æ–≤: {e}")
        return []


def update_item_field(message, item_id, field_name):
    try:
        new_value = message.text
        if field_name in ['shop_id', 'category_id', 'price']:
            new_value = int(new_value)
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute(f"UPDATE products SET {field_name} = ? WHERE id = ?",
                        (new_value, item_id))
            conn.commit()

        bot.send_message(message.chat.id, f"–ü–æ–ª–µ {field_name} —Ç–æ–≤–∞—Ä–∞ ID {item_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
        print(f"Error updating item field: {e}")


def process_edit_cat(message, cat_id):
    try:
        new_name = message.text.strip()
        if not new_name:
            bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute("SELECT id FROM categories WHERE id = ?", (cat_id,))
            if not cur.fetchone():
                bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return
            cur.execute("UPDATE categories SET name = ? WHERE id = ?",
                        (new_name, cat_id))
            conn.commit()

        bot.send_message(message.chat.id, f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
        print(f"Error updating category: {e}")

def update_shop_field(message, item_id, field_name):
    try:
        new_value = message.text
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute(f"UPDATE shops SET {field_name} = ? WHERE id = ?",
                        (new_value, item_id))
            conn.commit()

        bot.send_message(message.chat.id, f"–ü–æ–ª–µ {field_name} –º–∞–≥–∞–∑–∏–Ω–∞ ID {item_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
        print(f"Error updating shop field: {e}")

def process_item_image(message, temp_items):
    try:
        chat_id = message.chat.id
        item_data = temp_items.get(chat_id)
        if not item_data:
            raise Exception("–î–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        item_data['images'] = message.text
        with get_db() as conn:
            cur = conn.cursor()
            if item_data['sizes'] != "-":
                size = item_data['sizes']
            else:
                size = None
            cur.execute("""
                INSERT INTO products 
                (name, shop_id, category_id, description, price, images, status, sizes)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                item_data['name'],
                item_data['shop_id'],
                item_data['category_id'],
                item_data['description'],
                item_data['price'],
                item_data['images'],
                item_data['status'],
                size
            ))
            conn.commit()

        new_item_id = cur.lastrowid
        bot.send_message(chat_id, f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ID: {new_item_id}")
        if chat_id in temp_items:
            del temp_items[chat_id]

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
        print(f"Error in process_item_image: {e}")

def process_shop_status(message, temp_items):
    try:
        chat_id = message.chat.id
        item_data = temp_items.get(chat_id)

        if not item_data:
            raise Exception("–î–∞–Ω–Ω—ã–µ –æ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        item_data['status'] = message.text
        with get_db() as conn:
            cur = conn.cursor()
            cur.execute("""
                INSERT INTO shops 
                (name, description, images, status)
                VALUES (?, ?, ?, ?)
            """, (
                item_data['name'],
                item_data['description'],
                item_data['images'],
                item_data['status']
            ))
            conn.commit()
        new_item_id = cur.lastrowid
        bot.send_message(chat_id, f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ID: {new_item_id}")
        if chat_id in temp_items:
            del temp_items[chat_id]
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
        print(f"Error in process_item_image: {e}")