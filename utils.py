from telebot import types

from telebot.types import InputMediaPhoto
from bot_instance import bot
from database.db_operations import check_record_exists, get_products


def send_product_page(call, photos, descr):
    media = []
    for i, photo in enumerate(photos):
        if i == 0:
            media.append(InputMediaPhoto(
                media=open(photo, 'rb'),
                caption=descr,
                parse_mode="Markdown"
            ))
        else:
            media.append(InputMediaPhoto(
                media=open(photo, 'rb')
            ))

    bot.send_media_group(call, media)


def process_fio_step(message, conn):
    cursor = conn.cursor()
    try:
        fio = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        if len(fio) < 5:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –§–ò–û —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        if len(fio) > 100:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –§–ò–û —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (—Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, –¥–µ—Ñ–∏—Å—ã, –ø—Ä–æ–±–µ–ª—ã, –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã)
        if not all(char.isalpha() or char in ' -\'' for char in fio.replace('—ë', '–µ').replace('–Å', '–ï')):
            bot.send_message(message.chat.id,
                             "–û—à–∏–±–∫–∞: –§–ò–û —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã! –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã.")
            return

        cursor.execute("UPDATE users SET fio=? WHERE id=?",
                      (message.text, message.from_user.id))
        conn.commit()
        bot.send_message(message.chat.id, "–§–ò–û —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


def process_phone_step(message, conn):
    cursor = conn.cursor()
    try:
        if message.text[0]=='+' and len(message.text)!=12:
            bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return
        if message.text[0]=='8' and len(message.text)!=11:
            bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return
        allowed_chars = set(
            '0123456789+() -')
        if not all(char in allowed_chars for char in message.text):
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã!")
            return

        cursor.execute("UPDATE users SET phone_number=? WHERE id=?",
                      (message.text, message.from_user.id))
        conn.commit()
        bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


def process_region_step(message, conn):
    cursor = conn.cursor()
    try:
        cursor.execute("UPDATE users SET region=? WHERE id=?",
                      (message.text, message.from_user.id))
        conn.commit()
        bot.send_message(message.chat.id, "–†–µ–≥–∏–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


def process_city_step(message, conn):
    cursor = conn.cursor()
    try:
        cursor.execute("UPDATE users SET city=? WHERE id=?",
                      (message.text, message.from_user.id))
        conn.commit()
        bot.send_message(message.chat.id, "–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


def process_street_step(message, conn):
    cursor = conn.cursor()
    try:
        cursor.execute("UPDATE users SET street=? WHERE id=?",
                      (message.text, message.from_user.id))
        conn.commit()
        bot.send_message(message.chat.id, "–£–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


def process_house_step(message, conn):
    cursor = conn.cursor()
    try:
        if not message.text[0].isdigit() or len(message.text) > 15 or message.text[0] in "/\\":
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –¥–æ–º–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return
        allowed_chars = set(
            '0123456789/\\–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–ØabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ- ')
        if not all(char in allowed_chars for char in message.text):
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –¥–æ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã!")
            return

        cursor.execute("UPDATE users SET house_number=? WHERE id=?",
                      (message.text, message.from_user.id))
        conn.commit()
        bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä –¥–æ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


def process_flat_step(message, conn):
    cursor = conn.cursor()
    try:
        if not message.text.isdigit():
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return
        cursor.execute("UPDATE users SET flat_number=? WHERE id=?",
                      (message.text, message.from_user.id))
        conn.commit()
        bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


def process_index_step(message, conn):
    cursor = conn.cursor()
    try:
        if not message.text.isdigit():
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")
            return

        if len(message.text) != 6:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Ü–∏—Ñ—Ä!")
            return

            # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute("UPDATE users SET [index]=? WHERE id=?",
                       (message.text, message.from_user.id))
        conn.commit()
        bot.send_message(message.chat.id, "–ò–Ω–¥–µ–∫—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

def price_counter(mess, total_q, total_p):
    if total_q % 10 == 1 and total_q % 100 != 11:
        goods_word = "—Ç–æ–≤–∞—Ä"
    elif 2 <= total_q % 10 <= 4 and (total_q % 100 < 10 or total_q % 100 >= 20):
        goods_word = "—Ç–æ–≤–∞—Ä–∞"
    else:
        goods_word = "—Ç–æ–≤–∞—Ä–æ–≤"

    mes = "–í –∫–æ—Ä–∑–∏–Ω–µ " + str(total_q) + " " + goods_word + " –Ω–∞ —Å—É–º–º—É " + str(total_p) + " —Ä—É–±–ª–µ–π."

    mar = types.InlineKeyboardMarkup()
    i1 = types.InlineKeyboardButton('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data="order")
    mar.add(i1)
    total_mes = bot.send_message(mess, mes, reply_markup=mar)
    return total_mes

def print_personal_data(pers_data):
    descr = (
        f"*Username: *{pers_data[0] if pers_data[0] is not None else '-'}\n"
        f"*–§–ò–û: *{pers_data[3] if pers_data[3] is not None else '-'}\n"
        f"*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: *{pers_data[1] if pers_data[1] is not None else '-'}\n"
        f"*–†–µ–≥–∏–æ–Ω: *{pers_data[8] if pers_data[8] is not None else '-'}\n"
        f"*–ì–æ—Ä–æ–¥: *{pers_data[4] if pers_data[4] is not None else '-'}\n"
        f"*–£–ª–∏—Ü–∞: *{pers_data[5] if pers_data[5] is not None else '-'}\n"
        f"*–ù–æ–º–µ—Ä –¥–æ–º–∞: *{pers_data[6] if pers_data[6] is not None else '-'}\n"
        f"*–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã: *{pers_data[7] if pers_data[7] is not None else '-'}\n"
        f"*–ò–Ω–¥–µ–∫—Å: *{pers_data[2] if pers_data[2] is not None else '-'}"
    )

    txt = "*–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:* \n\n" + descr
    return txt


def process_product_id_search(message):
    try:
        products = get_products()
        item_id = int(message.text.strip())

        if 1 <= item_id <= len(products):
            product = products[item_id - 1]
            user_id = message.from_user.id


            if product.status:
                markup = types.InlineKeyboardMarkup()
                send_product_page(message.chat.id, product.images, product.description)
                # –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                fav_callback = f'favorite{product.id}'
                if not check_record_exists(user_id, product.id):
                    fav_button = types.InlineKeyboardButton('‚ù§Ô∏è', callback_data=fav_callback)
                else:
                    fav_button = types.InlineKeyboardButton('ü§ç', callback_data=fav_callback)

                # –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
                cart_button = types.InlineKeyboardButton('üõí', callback_data=f'cart{product.id}')

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞

                markup.add(fav_button, cart_button)
                bot.send_message(message.chat.id, '‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è', reply_markup=markup)
            else:
                send_product_page(message.chat.id, product.images, "*–ù–ï–¢ –í –ù–ê–õ–ò–ß–ò–ò!*\n\n" + product.description)

        else:
            bot.send_message(message.chat.id, f"ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(products)}")
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            msg = bot.send_message(message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ ID –µ—â—ë —Ä–∞–∑:")
            bot.register_next_step_handler(msg, process_product_id_search)

    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ!")
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        msg = bot.send_message(message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ ID –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(msg, process_product_id_search)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")