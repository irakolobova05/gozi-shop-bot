from datetime import datetime
from random import choice
import time
from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from constants import variants
from keyboards import create_main_keyboard, create_inline_keyboard
from database.db_operations import update_cart_quantity, insert_highlight, delete_highlight, delete_cart, insert_users, personal_data, get_products, get_shops, get_categories, cart_database, likes_database, check_record_exists, insert_cart_with_size, insert_cart
from database.db import conn, cur
from bot_instance import bot
from utils import send_product_page, process_fio_step, process_phone_step, process_region_step, process_city_step, process_street_step, process_house_step, process_flat_step, process_index_step, price_counter, print_personal_data, process_product_id_search

media_messages = {}
cart_messages = {}
total_price_messages = {}
user_states = {}

@bot.message_handler(commands=['start'])
def welcome(message):
    try:
        user_name = message.from_user.username
        user_first_name = message.from_user.first_name
        user_id = message.from_user.id

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2 –≤—Ä—É—á–Ω—É—é
        escaped_first_name = user_first_name.translate(str.maketrans({
            "_": r"\_",
            "*": r"\*",
            "[": r"\[",
            "]": r"\]",
            "(": r"\(",
            ")": r"\)",
            "~": r"\~",
            "`": r"\`",
            ">": r"\>",
            "#": r"\#",
            "+": r"\+",
            "-": r"\-",
            "=": r"\=",
            "|": r"\|",
            "{": r"\{",
            "}": r"\}",
            ".": r"\.",
            "!": r"\!"
        }))
        agree_markup = InlineKeyboardMarkup()
        agree_markup.add(InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree"))
        bot.send_message(
            message.chat.id,
            text=f"""
–ü—Ä–∏–≤–µ—Ç, {escaped_first_name}\! üëã\n–ú—ã ‚Äî —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ streetwear –æ–¥–µ–∂–¥—ã\. –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –≤–µ—â–∏ –æ—Ç —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤\.\n\n –ü–æ–∫—É–ø–∞—è —É –Ω–∞—Å, —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—à—å –≥–∞—Ä–¥–µ—Ä–æ–± ‚Äî —Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö —Ç–≤–æ—Ä—Ü–æ–≤ –∏ —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —á–∞—Å—Ç—å—é –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\!\n\nüìå –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å [–ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://docs\.google\.com/document/d/1Vp\_LmDqdcAgMoghbV8KnVjbTDIJ7Lbj9KZEhP3Qwtug/edit\?tab=t\.0)\.\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–±–æ—è–º –ø–∏—à–∏ @irakolobova
            """,
            parse_mode='MarkdownV2',
            reply_markup=agree_markup
        )
        insert_users(user_id, user_name)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")



@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.chat.type == 'private':
        if message.text == '–ü—Ä–æ–¥–∞–≤—Ü—ã':
            buttons=[]
            shops = get_shops()
            for i in range(len(shops)):
                buttons.append((shops[i].name, str(shops[i].id)))
            markup = create_inline_keyboard(buttons)
            bot.send_message(message.chat.id, '–õ–æ–≤–∏ –ø–æ–¥–±–æ—Ä–∫—É –Ω–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ ‚Äî –∫—É–¥–∞ –∑–∞–≥–ª—è–Ω–µ–º? üõí', reply_markup=markup)

        elif message.text == '–ö–∞—Ç–∞–ª–æ–≥':
            buttons = []
            categories = get_categories()
            for i in range(len(categories)):
                buttons.append((categories[i].name, 'k'+str(categories[i].id)))
            markup = create_inline_keyboard(buttons)
            bot.send_message(message.chat.id, '–°–µ–≥–æ–¥–Ω—è –∑–∞–∫—É–ø–∞–µ–º—Å—è?\n–í—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—éüõçÔ∏è', reply_markup=markup)

        elif message.text == '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
            products = get_products()
            bot.send_message(message.chat.id, '*–ò–∑–±—Ä–∞–Ω–Ω–æ–µ* \n–í—Å—ë, —á—Ç–æ –∑–∞—Ü–µ–ø–∏–ª–æ üëÄ', parse_mode="Markdown")
            user_id = message.from_user.id
            fav_ind = likes_database(user_id)
            favorites = {}
            for i in range(len(fav_ind)):
                if products[fav_ind[i]-1].status:
                    favorites[fav_ind[i]] = products[fav_ind[i]-1]

            for i in favorites:
                media = []
                arr=favorites[i].images
                descr=favorites[i].description
                for j in range(len(arr)):
                    if j== 0:
                        media.append(types.InputMediaPhoto(open(arr[j], 'rb'), caption=descr, parse_mode="Markdown"))
                    else:
                        media.append(types.InputMediaPhoto(open(arr[j], 'rb')))
                sent_media_messages = bot.send_media_group(message.chat.id, media)
                media_messages[i] = [msg.message_id for msg in sent_media_messages]
                markup = types.InlineKeyboardMarkup()
                name1 = 'del_iz' + str(favorites[i].id)
                name2 = 'cart' + str(favorites[i].id)
                item1 = types.InlineKeyboardButton('ü§ç', callback_data=name1)
                item2 = types.InlineKeyboardButton('üõí', callback_data=name2)
                markup.add(item1, item2)
                bot.send_message(message.chat.id, '‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è', reply_markup=markup)

        elif message.text == '–ö–æ—Ä–∑–∏–Ω–∞':

            products = get_products()
            user_id = message.from_user.id
            cart_arr = cart_database(user_id)
            total_price = 0
            total_quantity = 0
            bot.send_message(message.chat.id, "*–ö–æ—Ä–∑–∏–Ω–∞*\n–í—Å—ë –Ω–∞ –º–µ—Å—Ç–µ, –∂–¥—ë—Ç —Ç–µ–±—è üõí", parse_mode="Markdown")
            for i in range(len(cart_arr)):

                media = []
                arr = products[cart_arr[i][0]-1].images
                total_price += products[cart_arr[i][0] - 1].price * cart_arr[i][2]
                total_quantity += cart_arr[i][2]
                if cart_arr[i][1] is not None:
                    descr = products[cart_arr[i][0]-1].description + "\n \n*–†–∞–∑–º–µ—Ä: *" + cart_arr[i][1] + "\n \n*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* "+ str(cart_arr[i][2])
                else:
                    descr = products[cart_arr[i][0] - 1].description + "\n \n*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* "+ str(cart_arr[i][2])

                for j in range(len(arr)):
                    if j == 0:
                        media.append(types.InputMediaPhoto(open(arr[j], 'rb'), caption=descr, parse_mode="Markdown"))
                    else:
                        media.append(types.InputMediaPhoto(open(arr[j], 'rb')))
                sent_media_messages = bot.send_media_group(message.chat.id, media)
                key = f"{cart_arr[i][0]}_{cart_arr[i][1]}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á: product_id + size
                cart_messages[key] = [msg.message_id for msg in sent_media_messages]
                markup = types.InlineKeyboardMarkup()
                name1 = 'delcart' + '_' + str(cart_arr[i][0]) + '_' + str(cart_arr[i][1])
                name2 = 'quantity+' + '_' + str(cart_arr[i][0]) + '_' + str(cart_arr[i][1]) + '_' + str(cart_arr[i][2])
                name3 = 'quantity-' + '_' + str(cart_arr[i][0]) + '_' + str(cart_arr[i][1]) + '_' + str(cart_arr[i][2])
                item1 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=name1)
                item2 = types.InlineKeyboardButton('+', callback_data=name2)
                item3 = types.InlineKeyboardButton('-', callback_data=name3)
                markup.add(item1, item2, item3)
                delete_message = bot.send_message(message.chat.id, '‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è', reply_markup=markup)
                cart_messages[key].append(delete_message.message_id)
            if total_quantity != 0 and total_price != 0:
                total_message = price_counter(message.chat.id, total_quantity, total_price)
                total_price_messages[message.chat.id] = total_message.message_id
            else:
                bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")


        elif message.text == "–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":
            cur.execute("UPDATE users SET username=? WHERE id=?",
                        (message.from_user.username, message.from_user.id))
            conn.commit()
            user_id = message.from_user.id
            pers_data = personal_data(user_id)
            if not pers_data:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
                bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", parse_mode="Markdown")
            else:
                txt=print_personal_data(pers_data)
                markup = types.InlineKeyboardMarkup()
                item1 = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data='change')
                markup.add(item1)
                bot.send_message(message.chat.id, txt, parse_mode="Markdown", reply_markup=markup)

        elif message.text == "–ü–æ–∏—Å–∫ –ø–æ id":
            msg = bot.send_message(message.chat.id, f"–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ?üî•\n–í–≤–µ–¥–∏ ID —Ç–æ–≤–∞—Ä–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏! (1-{len(get_products())}):")
            bot.register_next_step_handler(msg, process_product_id_search)
        else:
            bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')




@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            user_id = call.from_user.id
            shops = get_shops()
            categories = get_categories()
            products = get_products()

            # –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            if call.data=="change":
                markup = types.InlineKeyboardMarkup()
                item2 = types.InlineKeyboardButton('–§–ò–û', callback_data='change2')
                item3 = types.InlineKeyboardButton('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', callback_data='change3')
                item4 = types.InlineKeyboardButton('–†–µ–≥–∏–æ–Ω', callback_data='change4')
                item5 = types.InlineKeyboardButton('–ì–æ—Ä–æ–¥', callback_data='change5')
                item6 = types.InlineKeyboardButton('–£–ª–∏—Ü–∞', callback_data='change6')
                item7 = types.InlineKeyboardButton('–ù–æ–º–µ—Ä –¥–æ–º–∞', callback_data='change7')
                item8 = types.InlineKeyboardButton('–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã', callback_data='change8')
                item9 = types.InlineKeyboardButton('–ò–Ω–¥–µ–∫—Å', callback_data='change9')
                markup.add(item2, item3, item4, item5, item6, item7, item8, item9)
                bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –ø–æ–ª–µ, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ", reply_markup=markup)

            elif call.data == 'change2':  # –§–ò–û
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –§–ò–û:")
                bot.register_next_step_handler(msg, process_fio_step, conn)


            elif call.data == 'change3':  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
                bot.register_next_step_handler(msg, process_phone_step, conn)

            elif call.data == 'change4':  # –†–µ–≥–∏–æ–Ω
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω:")
                bot.register_next_step_handler(msg, process_region_step, conn)

            elif call.data == 'change5':  # –ì–æ—Ä–æ–¥
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:")

                bot.register_next_step_handler(msg, process_city_step, conn)

            elif call.data == 'change6':  # –£–ª–∏—Ü–∞
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —É–ª–∏—Ü—É:")
                bot.register_next_step_handler(msg, process_street_step, conn)

            elif call.data == 'change7':  # –ù–æ–º–µ—Ä –¥–æ–º–∞
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–æ–º–∞:")
                bot.register_next_step_handler(msg, process_house_step, conn)

            elif call.data == 'change8':  # –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã:")
                bot.register_next_step_handler(msg, process_flat_step, conn)

            elif call.data == 'change9':  # –ò–Ω–¥–µ–∫—Å
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å:")
                bot.register_next_step_handler(msg, process_index_step, conn)

            if call.data == "agree":
                try:
                    markup = create_main_keyboard()
                    bot.send_message(call.message.chat.id, "–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! –° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?", reply_markup=markup)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ send_main_keyboard: {e}")

            if call.data == 'order':
                pers_data = personal_data(user_id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–æ–æ–±—â–µ –ø–æ–ª—É—á–µ–Ω—ã
                if pers_data is None:
                    bot.send_message(call.message.chat.id,
                                     '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.')
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                required_fields = {
                    3: '–§–ò–û',
                    1: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                    8: '–†–µ–≥–∏–æ–Ω',
                    4: '–ì–æ—Ä–æ–¥',
                    5: '–£–ª–∏—Ü–∞',
                    6: '–ù–æ–º–µ—Ä –¥–æ–º–∞',
                    2: '–ò–Ω–¥–µ–∫—Å'
                }

                missing_fields = [field_name for index, field_name in required_fields.items()
                                  if len(pers_data) <= index or pers_data[index] is None]

                if missing_fields:
                    markup = types.InlineKeyboardMarkup()
                    message = '–î–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ! –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã:\n' + \
                              '\n'.join(f'‚Ä¢ {field}' for field in missing_fields) + \
                              '\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ.'
                    item = types.InlineKeyboardButton('–í–≤–µ—Å—Ç–∏', callback_data='change')
                    markup.add(item)
                    bot.send_message(call.message.chat.id, message, reply_markup=markup)
                    print_personal_data(pers_data)
                else:
                    bot.send_message(call.message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:')
                    txt = print_personal_data(pers_data)
                    markup = types.InlineKeyboardMarkup()
                    item1 = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data='change')
                    item2 = types.InlineKeyboardButton('–í—Å–µ –≤–µ—Ä–Ω–æ', callback_data='ok')
                    markup.add(item1, item2)
                    bot.send_message(call.message.chat.id, txt, parse_mode="Markdown", reply_markup=markup)

            if call.data == 'ok':
                try:
                    cart = cart_database(user_id)
                    today = datetime.now().strftime("%Y-%m-%d %H:%M")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
                    if not cart:
                        bot.send_message(call.message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
                        return

                    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –≤ –∑–∞–∫–∞–∑—ã
                    for item in cart:
                        product_id, size, quantity = item[0], item[1], item[2]

                        # –ü–æ–ª—É—á–∞–µ–º shop_id –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                        cur.execute("SELECT shop_id FROM products WHERE id = ?", (product_id,))
                        result = cur.fetchone()

                        if not result:
                            continue

                        shop_id = result[0]

                        cur.execute("SELECT price FROM products WHERE id = ?", (product_id,))
                        res = cur.fetchone()
                        if not result:
                            continue
                        pr = res[0]

                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–∫–∞–∑—ã
                        cur.execute('''INSERT INTO orders (user_id, shop_id, product_id, date, quantity, size, price) 
                                      VALUES (?, ?, ?, ?, ?, ?, ?)''',
                                    (user_id, shop_id, product_id, today, quantity, size, pr*quantity))
                        conn.commit()

                    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    cur.execute("DELETE FROM cart WHERE user_id = ?", (user_id,))
                    conn.commit()

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    bot.send_message(call.message.chat.id,
                                     "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
                    bot.send_message(call.message.chat.id,
                                     "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


            for i in range(len(shops)):
                if call.data==str(shops[i].id) and shops[i].status:
                    markup = types.InlineKeyboardMarkup()
                    name='next'+str(shops[i].id)
                    item = types.InlineKeyboardButton('–ì–æ—É', callback_data=name)
                    send_product_page(call.message.chat.id, shops[i].images, shops[i].description)
                    markup.add(item)
                    bot.send_message(call.message.chat.id, '–ó–∞ –ø–æ–∫—É–ø–∫–∞–º–∏?üõçÔ∏è', reply_markup=markup)
                    break

            #–≤—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
            for i in range(len(shops)):
                if call.data == 'next' + str(shops[i].id):
                    bot.delete_message(call.message.chat.id, call.message.message_id)
                    cur.execute("SELECT id FROM products WHERE shop_id = ?", (shops[i].id,))
                    shop_pr = [row[0] for row in cur.fetchall()]

                    for product_id in shop_pr:
                        product_index = product_id - 1  # –µ—Å–ª–∏ id –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1, –∞ –∏–Ω–¥–µ–∫—Å—ã —Å 0
                        product = products[product_index]

                        if product.status:
                            markup = types.InlineKeyboardMarkup()

                            # –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                            fav_callback = f'favorite{product.id}'
                            if not check_record_exists(user_id, product.id):
                                fav_button = types.InlineKeyboardButton('‚ù§Ô∏è', callback_data=fav_callback)
                            else:
                                fav_button = types.InlineKeyboardButton('ü§ç', callback_data=fav_callback)

                            # –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
                            cart_button = types.InlineKeyboardButton('üõí', callback_data=f'cart{product.id}')

                            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞

                            send_product_page(call.message.chat.id, product.images, product.description)
                            markup.add(fav_button, cart_button)
                            text = choice(variants)
                            bot.send_message(call.message.chat.id, text, reply_markup=markup)
                    break

            # –≤—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            for i in range(len(categories)):
                if call.data == 'k'+str(categories[i].id):
                    cur.execute("SELECT id FROM products WHERE category_id = ?", (categories[i].id,))
                    prod = [row[0] for row in cur.fetchall()]

                    bot.send_message(call.message.chat.id, '*'+categories[i].name+ ':*', parse_mode="Markdown")
                    for product_id in prod:
                        product_index = product_id - 1  # –µ—Å–ª–∏ id –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1, –∞ –∏–Ω–¥–µ–∫—Å—ã —Å 0
                        product = products[product_index]

                        if product.status:
                            markup = types.InlineKeyboardMarkup()
                            # –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                            fav_callback = f'favorite{product.id}'
                            if not check_record_exists(user_id, product.id):
                                fav_button = types.InlineKeyboardButton('‚ù§Ô∏è', callback_data=fav_callback)
                            else:
                                fav_button = types.InlineKeyboardButton('ü§ç', callback_data=fav_callback)

                            # –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
                            cart_button = types.InlineKeyboardButton('üõí', callback_data=f'cart{product.id}')

                            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
                            send_product_page(call.message.chat.id, product.images, product.description)
                            markup.add(fav_button, cart_button)

                            text = choice(variants)
                            bot.send_message(call.message.chat.id, text, reply_markup=markup)
                    break

            # —É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            for i in range(len(products)):
                if call.data == 'del_iz' + str(products[i].id):
                    favorite_id = products[i].id
                    if favorite_id in media_messages:
                        for message_id in media_messages[favorite_id]:
                            bot.delete_message(call.message.chat.id, message_id)

                        bot.delete_message(call.message.chat.id, call.message.message_id)
                    delete_highlight(user_id, products[i].id)
                    break

            # –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            for i in range(len(products)):
                if call.data == 'favorite' + str(products[i].id):
                    current_text = call.message.reply_markup.keyboard[0][0].text
                    new_button_text = 'ü§ç' if current_text == '‚ù§Ô∏è' else '‚ù§Ô∏è'

                    markup = types.InlineKeyboardMarkup()
                    item1 = types.InlineKeyboardButton(new_button_text, callback_data=f'favorite{products[i].id}')
                    item2 = types.InlineKeyboardButton('üõí', callback_data=f'cart{products[i].id}')
                    markup.add(item1, item2)

                    # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
                    bot.edit_message_reply_markup(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        reply_markup=markup
                    )

                    if new_button_text == 'ü§ç':  # –ó–Ω–∞—á–∏—Ç, —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                        bot.send_message(
                            chat_id=call.message.chat.id,
                            text='–î–æ–±–∞–≤–∏–ª –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! –¢–µ–ø–µ—Ä—å –Ω–µ –ø–æ—Ç–µ—Ä—è–µ—Ç—Å—è üîñ',
                            reply_to_message_id=call.message.message_id  # –≠—Ç–æ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É
                        )
                        insert_highlight(call.from_user.id, products[i].id)
                    else:  # –£–¥–∞–ª–∏–ª–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                        bot.send_message(
                            chat_id=call.message.chat.id,
                            text='–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!',
                            reply_to_message_id=call.message.message_id
                        )
                        delete_highlight(user_id, products[i].id)
                    break

            # –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
            for i in range(len(products)):
                # –ï—Å–ª–∏ callback_data –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'cart'
                if call.data.startswith('cart'):
                    product_id = int(call.data.replace('cart', ''))
                    if products[i].id == product_id:
                        # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä—ã
                        if hasattr(products[i], 'sizes') and products[i].sizes:
                            markup = types.InlineKeyboardMarkup()
                            for s in range(len(products[i].sizes)):
                                size = products[i].sizes[s]
                                name = 'sizecart' + '-' + f"{products[i].id}-{s}"  # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data
                                item = types.InlineKeyboardButton(size, callback_data=name)
                                markup.add(item)
                            bot.send_message(
                                chat_id=call.message.chat.id,
                                text='–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä',
                                reply_to_message_id=call.message.message_id,  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å —Ç–æ–≤–∞—Ä–æ–º
                                reply_markup=markup
                            )
                        else:
                            # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
                            insert_cart(user_id, products[i].id)
                            bot.send_message(
                                chat_id=call.message.chat.id,
                                text="–ì–æ—Ç–æ–≤–æ! –õ—É—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ ‚Äî –ø–æ—á—Ç–∏ —Ç–≤–æ–π üòâ",
                                reply_to_message_id=call.message.message_id  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å —Ç–æ–≤–∞—Ä–æ–º
                            )
                        break

                # –ï—Å–ª–∏ callback_data —Å–æ–¥–µ—Ä–∂–∏—Ç id –∏ —Ä–∞–∑–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, "123-0")
                elif call.data.startswith('sizecart'):
                    r = call.data.split('-')
                    product_id = int(r[1])
                    size_index = int(r[2])
                    if products[i].id == product_id:
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
                        insert_cart_with_size(user_id, products[i].id, products[i].sizes[size_index])
                        bot.send_message(
                            chat_id=call.message.chat.id,
                            text="–ì–æ—Ç–æ–≤–æ! –õ—É—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ ‚Äî –ø–æ—á—Ç–∏ —Ç–≤–æ–π üòâ",
                            reply_to_message_id=call.message.message_id  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å —Ç–æ–≤–∞—Ä–æ–º
                        )
                        break

            # —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            if call.data.startswith('delcart'):
                try:
                    r = call.data.split('_')
                    product_id = int(r[1])
                    size = r[2]
                    key = f"{product_id}_{size}"

                    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if key in cart_messages:
                        for message_id in cart_messages[key]:
                            try:
                                bot.delete_message(call.message.chat.id, message_id)
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
                        del cart_messages[key]

                    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
                    if size != 'None':
                        delete_cart(user_id, product_id, size)
                    else:
                        delete_cart(user_id, product_id)

                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
                    cur.execute("""
                        SELECT 
                            SUM(c.quantity), 
                            SUM(c.quantity * p.price) 
                        FROM cart c
                        JOIN products p ON c.product_id = p.id
                        WHERE c.user_id = ?
                    """, (user_id,))
                    new_quantity, new_price = cur.fetchone()
                    conn.commit()
                    if call.message.chat.id in total_price_messages:
                        try:
                            bot.delete_message(call.message.chat.id, total_price_messages[call.message.chat.id])
                        except:
                            pass


                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                    if new_quantity and new_price:
                        total_message = price_counter(call.message.chat.id,
                                                      new_quantity if new_quantity else 0,
                                                      new_price if new_price else 0.0)
                        total_price_messages[call.message.chat.id] = total_message.message_id
                    else:
                        bot.send_message(call.message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")



                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ delcart: {e}")


            #—É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if call.data.startswith('quantity+'):
                try:
                    r = call.data.split('_')
                    if len(r) < 4:
                        print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {call.data}")
                        return

                    product_id = int(r[1])
                    size = r[2]
                    quantity = int(r[3])
                    key = f"{product_id}_{size}"

                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ
                    if size != 'None':
                        update_cart_quantity(user_id, product_id, size, quantity + 1)
                    else:
                        update_cart_quantity(user_id, product_id, None, quantity + 1)

                    if key in cart_messages:
                        for message_id in cart_messages[key]:
                            try:
                                bot.delete_message(call.message.chat.id, message_id)
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

                        del cart_messages[key]

                    media = []
                    arr = products[product_id - 1].images
                    if size != 'None':
                        descr = products[
                                    product_id - 1].description + "\n \n*–†–∞–∑–º–µ—Ä: *" + size + "\n \n*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* " + str(
                            quantity + 1)
                    else:
                        descr = products[product_id - 1].description + "\n \n*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* " + str(quantity + 1)

                    for j in range(len(arr)):
                        if j == 0:
                            media.append(
                                types.InputMediaPhoto(open(arr[j], 'rb'), caption=descr, parse_mode="Markdown"))
                        else:
                            media.append(types.InputMediaPhoto(open(arr[j], 'rb')))

                    sent_media_messages = bot.send_media_group(call.message.chat.id, media)
                    key = f"{product_id}_{size}"
                    cart_messages[key] = [msg.message_id for msg in sent_media_messages]

                    markup = types.InlineKeyboardMarkup()
                    name1 = 'delcart' + '_' + str(product_id) + '_' + str(size) + '_' + str(quantity + 1)
                    name2 = 'quantity+' + '_' + str(product_id) + '_' + str(size) + '_' + str(quantity + 1)
                    name3 = 'quantity-' + '_' + str(product_id) + '_' + str(size) + '_' + str(quantity + 1)
                    item1 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=name1)
                    item2 = types.InlineKeyboardButton('+', callback_data=name2)
                    item3 = types.InlineKeyboardButton('-', callback_data=name3)
                    markup.add(item1, item2, item3)
                    delete_message = bot.send_message(call.message.chat.id, '‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è', reply_markup=markup)
                    cart_messages[key].append(delete_message.message_id)

                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
                    cur.execute("""
                                            SELECT 
                                                SUM(c.quantity), 
                                                SUM(c.quantity * p.price) 
                                            FROM cart c
                                            JOIN products p ON c.product_id = p.id
                                            WHERE c.user_id = ?
                                        """, (user_id,))
                    new_quantity, new_price = cur.fetchone()
                    conn.commit()
                    if call.message.chat.id in total_price_messages:
                        try:
                            bot.delete_message(call.message.chat.id, total_price_messages[call.message.chat.id])
                        except:
                            pass

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                    if new_quantity != 0 and new_price != 0:
                        total_message = price_counter(call.message.chat.id,
                                                      new_quantity if new_quantity else 0,
                                                      new_price if new_price else 0.0)
                        total_price_messages[call.message.chat.id] = total_message.message_id
                    else:
                        bot.send_message(call.message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")




                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ quantity+: {e}")

            #—É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª-–≤–æ
            if call.data.startswith('quantity-'):
                try:
                    r = call.data.split('_')
                    if len(r) < 4:
                        print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {call.data}")
                        return

                    product_id = int(r[1])
                    size = r[2]
                    quantity = int(r[3])
                    key = f"{product_id}_{size}"

                    if quantity >= 2:
                        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ
                        if size != 'None':
                            update_cart_quantity(user_id, product_id, size, quantity - 1)
                        else:
                            update_cart_quantity(user_id, product_id, None, quantity - 1)

                        if key in cart_messages:
                            for message_id in cart_messages[key]:
                                try:
                                    bot.delete_message(call.message.chat.id, message_id)
                                except Exception as e:
                                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

                            del cart_messages[key]

                        media = []
                        arr = products[product_id - 1].images
                        if size != 'None':
                            descr = products[
                                        product_id - 1].description + "\n \n*–†–∞–∑–º–µ—Ä: *" + size + "\n \n*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* " + str(
                                quantity - 1)
                        else:
                            descr = products[product_id - 1].description + "\n \n*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* " + str(quantity - 1)

                        for j in range(len(arr)):
                            if j == 0:
                                media.append(
                                    types.InputMediaPhoto(open(arr[j], 'rb'), caption=descr, parse_mode="Markdown"))
                            else:
                                media.append(types.InputMediaPhoto(open(arr[j], 'rb')))

                        sent_media_messages = bot.send_media_group(call.message.chat.id, media)
                        key = f"{product_id}_{size}"
                        cart_messages[key] = [msg.message_id for msg in sent_media_messages]

                        markup = types.InlineKeyboardMarkup()
                        name1 = 'delcart' + '_' + str(product_id) + '_' + str(size) + '_' + str(quantity - 1)
                        name2 = 'quantity+' + '_' + str(product_id) + '_' + str(size) + '_' + str(quantity - 1)
                        name3 = 'quantity-' + '_' + str(product_id) + '_' + str(size) + '_' + str(quantity - 1)
                        item1 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=name1)
                        item2 = types.InlineKeyboardButton('+', callback_data=name2)
                        item3 = types.InlineKeyboardButton('-', callback_data=name3)
                        markup.add(item1, item2, item3)
                        delete_message = bot.send_message(call.message.chat.id, '‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è', reply_markup=markup)
                        cart_messages[key].append(delete_message.message_id)

                        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
                        cur.execute("""
                                                SELECT 
                                                    SUM(c.quantity), 
                                                    SUM(c.quantity * p.price) 
                                                FROM cart c
                                                JOIN products p ON c.product_id = p.id
                                                WHERE c.user_id = ?
                                            """, (user_id,))
                        new_quantity, new_price = cur.fetchone()
                        conn.commit()
                        if call.message.chat.id in total_price_messages:
                            try:
                                bot.delete_message(call.message.chat.id, total_price_messages[call.message.chat.id])
                            except:
                                pass

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                        if new_quantity != 0 and new_price != 0:
                            total_message = price_counter(call.message.chat.id,
                                                          new_quantity if new_quantity else 0,
                                                          new_price if new_price else 0.0)
                            total_price_messages[call.message.chat.id] = total_message.message_id
                        else:
                            bot.send_message(call.message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")




                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ quantity-: {e}")
    except Exception as e:
        print(repr(e))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True, skip_pending=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ polling: {e}")
            time.sleep(15)
